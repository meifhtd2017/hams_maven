<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
                        http://www.springframework.org/schema/tx  
       					http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       				 	http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 扫描所有包 -->
	<context:component-scan base-package="com.metime"></context:component-scan>
	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"> <value>${jdbc.driverClassName}</value> </property>
		<property name="url"> <value>${jdbc.url}</value> </property>
		<property name="username"> <value>${jdbc.username}</value> </property>
		<property name="password"> <value>${jdbc.password}</value> </property>
	</bean>
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <!-- 系统需要都抛出BusinessException异常，便于service之间互相调用时，使多个service处于同一个事务中 -->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="com.metime.common.utils.BusinessException"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="com.metime.common.utils.BusinessException"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="com.metime.common.utils.BusinessException"/>
            <tx:method name="exec*" propagation="REQUIRES_NEW" />
			<tx:method name="send*" propagation="REQUIRES_NEW" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
 	<!-- 那些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allServiceMethod" expression="execution(public * com.metime..*Service.*(..))" />
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
	</aop:config>

</beans>